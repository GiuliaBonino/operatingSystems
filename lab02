#include  <sys/types.h>
#include  <sys/stat.h>
#include  <dirent.h>
#include  <stdio.h>
#include  <stdlib.h>
#include  <string.h>
#include  <unistd.h>

#include  <limits.h>
#include  <errno.h>
#include  <stdarg.h>

#define N 100

int main(int argc, char *argv[]){


if(argc !=2)
fprintf(stderr, "Error");

char *s;
s=argv[1];
recursiveDir(s, 1);

}



void recursiveDir(char *path, int level){
struct stat buf;
struct dirent *dir;
DIR *dp;
char name[N];
if(lstat(path, &buf )<0){ // errore di lstat che in caso di successo ritorna 0
    fprintf(stderr, "Error\n");
    exit(1);
}
if(S_ISDIR(buf.st_mode)==0){ // casino, non deve essere un file
    return 1; //its a file not a directory
}
if(dp=opendir(path)==NULL){ //apro la directory
    fprintf("Error\n");
    exit(1);
}
while(dir=readdir(dp)!=NULL){
    sprintf(name, %s/%s, path, dir->d_name);

    if(lstat(name, &buf)<0){ // casino con lstat
        fprintf("Error\n");
        exit(1);
    }
    if(S_ISDIR(buf.st_mode)==0){ // è un file
        fprintf(stdout, "File %s\n", name );
    }
    else { // è una directory
        if(strcmp(dir->d_name, ".")==0 || strcmp(dir->d_name, "..")==0)
            continue;
     recursiveDir(name, level+1) ;  
    }
    }
closedir(dp);
return;
}

